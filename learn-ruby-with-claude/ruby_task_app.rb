############################################
# This code is generated by claude.ai, 2025/07/27
# Author: claude.ai and me
############################################
#!/usr/bin/env ruby
# encoding: utf-8

require 'json'
require 'date'

class TaskManager
  def initialize(data_file = 'tasks.json')
    @data_file = data_file
    @tasks = load_tasks
  end

  def load_tasks
    return [] unless File.exist?(@data_file)
    
    begin
      JSON.parse(File.read(@data_file))
    rescue JSON::ParserError
      []
    end
  end

  def save_tasks
    File.write(@data_file, JSON.pretty_generate(@tasks))
  end

  def add_task(title, description = '')
    task = {
      'id' => generate_id,
      'title' => title,
      'description' => description,
      'completed' => false,
      'created_at' => DateTime.now.strftime('%Y-%m-%d %H:%M:%S')
    }
    @tasks << task
    save_tasks
    puts "✅ タスク「#{title}」を追加しました"
  end

  def list_tasks
    if @tasks.empty?
      puts "📝 タスクがありません"
      return
    end

    puts "\n📋 タスク一覧:"
    puts "-" * 50
    @tasks.each_with_index do |task, index|
      status = task['completed'] ? '✓' : '○'
      puts "#{index + 1}. [#{status}] #{task['title']}"
      puts "   #{task['description']}" unless task['description'].empty?
      puts "   作成日: #{task['created_at']}"
      puts
    end
  end

  def complete_task(index)
    if index < 1 || index > @tasks.length
      puts "❌ 無効なタスク番号です"
      return
    end

    task = @tasks[index - 1]
    task['completed'] = true
    save_tasks
    puts "🎉 タスク「#{task['title']}」を完了しました！"
  end

  def delete_task(index)
    if index < 1 || index > @tasks.length
      puts "❌ 無効なタスク番号です"
      return
    end

    task = @tasks.delete_at(index - 1)
    save_tasks
    puts "🗑️  タスク「#{task['title']}」を削除しました"
  end

  def show_stats
    total = @tasks.length
    completed = @tasks.count { |task| task['completed'] }
    pending = total - completed
    
    puts "\n📊 統計情報:"
    puts "全タスク数: #{total}"
    puts "完了済み: #{completed}"
    puts "未完了: #{pending}"
    puts "完了率: #{total > 0 ? (completed.to_f / total * 100).round(1) : 0}%"
  end

  private

  def generate_id
    Time.now.to_i.to_s + rand(1000).to_s
  end
end

class TaskApp
  def initialize
    @task_manager = TaskManager.new
    @running = true
  end

  def run
    puts "🎯 Ruby タスク管理アプリへようこそ！"
    
    while @running
      show_menu
      choice = gets.chomp.to_i
      handle_choice(choice)
    end
  end

  private

  def show_menu
    puts "\n" + "=" * 40
    puts "何をしますか？"
    puts "1. タスクを追加"
    puts "2. タスク一覧を表示"
    puts "3. タスクを完了"
    puts "4. タスクを削除"
    puts "5. 統計情報を表示"
    puts "6. 終了"
    puts "=" * 40
    print "選択してください (1-6): "
  end

  def handle_choice(choice)
    case choice
    when 1
      add_task
    when 2
      @task_manager.list_tasks
    when 3
      complete_task
    when 4
      delete_task
    when 5
      @task_manager.show_stats
    when 6
      puts "👋 さようなら！"
      @running = false
    else
      puts "❌ 1-6の数字を入力してください"
    end
  end

  def add_task
    print "タスクのタイトルを入力: "
    title = gets.chomp
    
    return if title.empty?
    
    print "説明（オプション）: "
    description = gets.chomp
    
    @task_manager.add_task(title, description)
  end

  def complete_task
    @task_manager.list_tasks
    return if @task_manager.instance_variable_get(:@tasks).empty?
    
    print "完了するタスクの番号を入力: "
    index = gets.chomp.to_i
    @task_manager.complete_task(index)
  end

  def delete_task
    @task_manager.list_tasks
    return if @task_manager.instance_variable_get(:@tasks).empty?
    
    print "削除するタスクの番号を入力: "
    index = gets.chomp.to_i
    @task_manager.delete_task(index)
  end
end

# macOS特有の機能を追加
class MacOSFeatures
  def self.send_notification(title, message)
    system("osascript -e 'display notification \"#{message}\" with title \"#{title}\"'")
  end

  def self.open_finder(path = '.')
    system("open #{path}")
  end

  def self.speak(text)
    system("say '#{text}'")
  end
end

# 通知機能付きのタスクマネージャー
class NotifyingTaskManager < TaskManager
  def add_task(title, description = '')
    super
    MacOSFeatures.send_notification("タスク追加", "「#{title}」を追加しました")
  end

  def complete_task(index)
    return unless index >= 1 && index <= @tasks.length
    
    task_title = @tasks[index - 1]['title']
    super
    MacOSFeatures.send_notification("タスク完了", "「#{task_title}」を完了しました！")
    MacOSFeatures.speak("タスク完了")
  end
end

# アプリケーションの起動
if __FILE__ == $0
  begin
    # 通知機能を使いたい場合は NotifyingTaskManager を使用
    # app = TaskApp.new
    # app.run
    
    # または直接実行
    task_manager = TaskManager.new
    
    # サンプルタスクを追加（初回実行時）
    if task_manager.instance_variable_get(:@tasks).empty?
      puts "🎉 初回起動です！サンプルタスクを追加します"
      task_manager.add_task("Rubyアプリのテスト", "このタスク管理アプリを試してみる")
      task_manager.add_task("macOSの通知機能を確認", "通知が正しく動作するかテスト")
    end
    
    # インタラクティブモードを開始
    TaskApp.new.run
    
  rescue Interrupt
    puts "\n👋 アプリケーションを終了します"
  rescue => e
    puts "❌ エラーが発生しました: #{e.message}"
  end
end
